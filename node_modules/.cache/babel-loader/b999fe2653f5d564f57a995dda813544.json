{"ast":null,"code":"import { isTouchEvent } from '../gestures/utils/event-type.mjs';\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler) {\n  return function (event) {\n    var isMouseEvent = event instanceof MouseEvent;\n    var isPrimaryPointer = !isMouseEvent || isMouseEvent && event.button === 0;\n    if (isPrimaryPointer) {\n      eventHandler(event);\n    }\n  };\n}\nvar defaultPagePoint = {\n  pageX: 0,\n  pageY: 0\n};\nfunction pointFromTouch(e) {\n  var pointType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  var primaryTouch = e.touches[0] || e.changedTouches[0];\n  var point = primaryTouch || defaultPagePoint;\n  return {\n    x: point[pointType + \"X\"],\n    y: point[pointType + \"Y\"]\n  };\n}\nfunction pointFromMouse(point) {\n  var pointType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  return {\n    x: point[pointType + \"X\"],\n    y: point[pointType + \"Y\"]\n  };\n}\nfunction extractEventInfo(event) {\n  var pointType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  return {\n    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)\n  };\n}\nvar wrapHandler = function wrapHandler(handler) {\n  var shouldFilterPrimaryPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var listener = function listener(event) {\n    return handler(event, extractEventInfo(event));\n  };\n  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;\n};\nexport { extractEventInfo, wrapHandler };","map":null,"metadata":{},"sourceType":"module"}